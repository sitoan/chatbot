// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TourFlowBE.Models;

#nullable disable

namespace TourFlowBE.Migrations
{
    [DbContext(typeof(TourFlowContext))]
    partial class TourFlowContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TourFlowBE.Models.CityDestination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("CountryDestinationId")
                        .HasColumnType("int")
                        .HasColumnName("CountryDestinationID");

                    b.HasKey("Id")
                        .HasName("PK__CityDest__3214EC279EEB85A6");

                    b.HasIndex("CountryDestinationId");

                    b.ToTable("CityDestination", (string)null);
                });

            modelBuilder.Entity("TourFlowBE.Models.CountryDestination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id")
                        .HasName("PK__CountryD__3214EC273AB0E1C6");

                    b.ToTable("CountryDestination", (string)null);
                });

            modelBuilder.Entity("TourFlowBE.Models.Img", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CityDestinationId")
                        .HasColumnType("int")
                        .HasColumnName("CityDestinationID");

                    b.Property<string>("Url")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id")
                        .HasName("PK__IMGs__3214EC270676CB0B");

                    b.HasIndex("CityDestinationId");

                    b.ToTable("IMGs", (string)null);
                });

            modelBuilder.Entity("TourFlowBE.Models.Tour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AvailableSlots")
                        .HasColumnType("int");

                    b.Property<int?>("CityDestinationId")
                        .HasColumnType("int")
                        .HasColumnName("CityDestinationID");

                    b.Property<string>("DepartureLocation")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK__Tour__3214EC2728815A36");

                    b.HasIndex("CityDestinationId");

                    b.ToTable("Tour", (string)null);
                });

            modelBuilder.Entity("TourFlowBE.Models.TourOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BookDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Paid")
                        .HasColumnType("bit");

                    b.Property<int?>("Slots")
                        .HasColumnType("int");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<int>("TourBooked")
                        .HasColumnType("int");

                    b.Property<int>("TourflowUserId")
                        .HasColumnType("int")
                        .HasColumnName("TourflowUserID");

                    b.HasKey("Id")
                        .HasName("PK__TourOrde__3214EC2712660D55");

                    b.HasIndex("TourBooked");

                    b.HasIndex("TourflowUserId");

                    b.ToTable("TourOrder", null, t =>
                        {
                            t.HasTrigger("trg_DecreaseProductQuantity");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("TourFlowBE.Models.TourPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TourId")
                        .HasColumnType("int")
                        .HasColumnName("TourID");

                    b.HasKey("Id")
                        .HasName("PK__TourPlan__3214EC275A643148");

                    b.HasIndex("TourId");

                    b.ToTable("TourPlan", (string)null);
                });

            modelBuilder.Entity("TourFlowBE.Models.TourflowUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("IsAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("isAdmin");

                    b.Property<string>("Jwt")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("JWT");

                    b.Property<string>("RefreshKey")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("TourflowUserName")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id")
                        .HasName("PK__Tourflow__3214EC2764F2F9E4");

                    b.ToTable("TourflowUser", (string)null);
                });

            modelBuilder.Entity("TourFlowBE.Models.UserDataCollection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AvailableSlot")
                        .HasColumnType("int");

                    b.Property<double?>("Budget")
                        .HasColumnType("float");

                    b.Property<string>("Duration")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EndPos")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("StarPos")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("TourId")
                        .HasColumnType("int")
                        .HasColumnName("TourID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id")
                        .HasName("PK__User_Dat__3214EC2795DB0931");

                    b.HasIndex("UserId");

                    b.ToTable("User_DataCollection", (string)null);
                });

            modelBuilder.Entity("TourFlowBE.Models.CityDestination", b =>
                {
                    b.HasOne("TourFlowBE.Models.CountryDestination", "CountryDestination")
                        .WithMany("CityDestinations")
                        .HasForeignKey("CountryDestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_CountryDestination");

                    b.Navigation("CountryDestination");
                });

            modelBuilder.Entity("TourFlowBE.Models.Img", b =>
                {
                    b.HasOne("TourFlowBE.Models.CityDestination", "CityDestination")
                        .WithMany("Imgs")
                        .HasForeignKey("CityDestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_IMGsTourID");

                    b.Navigation("CityDestination");
                });

            modelBuilder.Entity("TourFlowBE.Models.Tour", b =>
                {
                    b.HasOne("TourFlowBE.Models.CityDestination", "CityDestination")
                        .WithMany("Tours")
                        .HasForeignKey("CityDestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_TourID");

                    b.Navigation("CityDestination");
                });

            modelBuilder.Entity("TourFlowBE.Models.TourOrder", b =>
                {
                    b.HasOne("TourFlowBE.Models.Tour", "TourBookedNavigation")
                        .WithMany("TourOrders")
                        .HasForeignKey("TourBooked")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BookedTourID");

                    b.HasOne("TourFlowBE.Models.TourflowUser", "TourflowUser")
                        .WithMany("TourOrders")
                        .HasForeignKey("TourflowUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TourflowUserID");

                    b.Navigation("TourBookedNavigation");

                    b.Navigation("TourflowUser");
                });

            modelBuilder.Entity("TourFlowBE.Models.TourPlan", b =>
                {
                    b.HasOne("TourFlowBE.Models.Tour", "Tour")
                        .WithMany("TourPlans")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_TourPlanID");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("TourFlowBE.Models.UserDataCollection", b =>
                {
                    b.HasOne("TourFlowBE.Models.TourflowUser", "User")
                        .WithMany("UserDataCollections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_USerDataCollection");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TourFlowBE.Models.CityDestination", b =>
                {
                    b.Navigation("Imgs");

                    b.Navigation("Tours");
                });

            modelBuilder.Entity("TourFlowBE.Models.CountryDestination", b =>
                {
                    b.Navigation("CityDestinations");
                });

            modelBuilder.Entity("TourFlowBE.Models.Tour", b =>
                {
                    b.Navigation("TourOrders");

                    b.Navigation("TourPlans");
                });

            modelBuilder.Entity("TourFlowBE.Models.TourflowUser", b =>
                {
                    b.Navigation("TourOrders");

                    b.Navigation("UserDataCollections");
                });
#pragma warning restore 612, 618
        }
    }
}
